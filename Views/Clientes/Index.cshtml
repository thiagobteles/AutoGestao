@using AutoGestao.Enumerador
@using AutoGestao.Models
@model ClientesIndexViewModel
@{
    ViewData["Title"] = "Clientes";
}

<div class="dashboard-container fade-in">
    <!-- CABE√áALHO DA P√ÅGINA -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h1 class="page-title">
                <i class="fas fa-users"></i>
                Clientes
            </h1>
        </div>
        <div>
            <a asp-action="Create" class="btn-modern btn-primary-modern btn-sm">
                <i class="fas fa-user-plus"></i>
                Novo Cliente
            </a>
        </div>
    </div>

    <!-- FILTROS HORIZONTAIS -->
    <div class="card-modern mb-3">
        <div class="card-header-modern">
            <i class="fas fa-search"></i>
            Filtros de Busca
        </div>
        <div class="card-body-modern">
            <form id="filtrosForm" class="d-flex flex-wrap gap-3 align-items-end">
                <div class="form-group-modern" style="flex: 2; min-width: 200px;">
                    <label class="form-label-modern">Nome ou Documento</label>
                    <input type="text" name="search" id="searchClientes" class="form-control-modern"
                           placeholder="Digite o nome, CPF ou CNPJ..."
                           value="@Model.Search" />
                </div>
                <div class="form-group-modern" style="flex: 1; min-width: 120px;">
                    <label class="form-label-modern">Tipo</label>
                    <select name="tipoCliente" id="filterTipo" class="form-select-modern">
                        <option value="">Todos</option>
                        <option value="PessoaFisica" selected="@(Model.TipoCliente == EnumTipoPessoa.PessoaFisica)">üë§ Pessoa F√≠sica</option>
                        <option value="PessoaJuridica" selected="@(Model.TipoCliente == EnumTipoPessoa.PessoaJuridica)">üè¢ Pessoa Jur√≠dica</option>
                    </select>
                </div>
                <div class="form-group-modern" style="flex: 1; min-width: 100px;">
                    <label class="form-label-modern">Status</label>
                    <select name="status" id="filterStatus" class="form-select-modern">
                        <option value="">Todos</option>
                        <option value="true" selected="@(Model.Ativo == true)">‚úÖ Ativo</option>
                        <option value="false" selected="@(Model.Ativo == false)">‚ùå Inativo</option>
                    </select>
                </div>
                <div class="form-group-modern" style="flex: 0; min-width: auto;">
                    <button type="button" class="btn btn-sm btn-outline-secondary" onclick="limparFiltros()" style="height: 28px;">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- LISTA DE CLIENTES SEM HEADER -->
    <div class="card-modern">
        <!-- REMOVIDO: Header da grid foi removido completamente -->
        <!-- CORPO DA TABELA -->
        <div class="card-body-modern p-0 position-relative">
            <div id="loadingOverlay" class="position-absolute w-100 h-100 d-none"
                 style="background: rgba(255,255,255,0.8); z-index: 10;">
                <div class="d-flex justify-content-center align-items-center h-100">
                    <div class="loading-spinner me-2"></div>
                    <span class="loading-text">Carregando...</span>
                </div>
            </div>

            <div id="gridContainer">
                @await Html.PartialAsync("_ClientesGrid", Model)
            </div>
        </div>

        <!-- FOOTER SIMPLIFICADO - APENAS PAGINA√á√ÉO -->
        @if (Model.TotalPages > 1 && Model.PageSize != -1)
        {
            <div class="card-footer">
                <nav aria-label="Navega√ß√£o de p√°ginas">
                    <ul class="pagination justify-content-center mb-0">
                        <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                            <button class="page-link" onclick="changePage(1)" disabled="@(!Model.HasPreviousPage)">
                                <i class="fas fa-angle-double-left"></i>
                            </button>
                        </li>
                        <li class="page-item @(!Model.HasPreviousPage ? "disabled" : "")">
                            <button class="page-link" onclick="changePage(@(Model.CurrentPage - 1))" disabled="@(!Model.HasPreviousPage)">
                                <i class="fas fa-angle-left"></i>
                            </button>
                        </li>

                        @{
                            var startPage = Math.Max(1, Model.CurrentPage - 2);
                            var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                        }

                        @for (int i = startPage; i <= endPage; i++)
                        {
                            <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                <button class="page-link" onclick="changePage(@i)">@i</button>
                            </li>
                        }

                        <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                            <button class="page-link" onclick="changePage(@(Model.CurrentPage + 1))" disabled="@(!Model.HasNextPage)">
                                <i class="fas fa-angle-right"></i>
                            </button>
                        </li>
                        <li class="page-item @(!Model.HasNextPage ? "disabled" : "")">
                            <button class="page-link" onclick="changePage(@Model.TotalPages)" disabled="@(!Model.HasNextPage)">
                                <i class="fas fa-angle-double-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        }

        <!-- CONTADOR DE REGISTROS FIXO NO FINAL -->
        <div class="card-footer bg-light text-center" style="padding: 0.25rem; font-size: 0.75rem; color: #6b7280;">
            Mostrando @Model.StartRecord-@Model.EndRecord de @Model.TotalRecords registros

            <!-- Seletor de quantidade integrado -->
            <div class="d-inline-flex align-items-center ms-3">
                <span class="me-2">Exibir:</span>
                <select id="pageSizeSelector" class="form-select form-select-sm" style="width: 70px; height: 24px; font-size: 0.7rem;">
                    @foreach (var size in Model.PageSizeOptions)
                    {
                        <option value="@size" selected="@(Model.PageSize == size)">
                            @Model.GetPageSizeText(size)
                        </option>
                    }
                </select>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let isLoadingVisible = false;
        let loadingTimeout = null;

        document.addEventListener('DOMContentLoaded', function() {
            // Configurar eventos dos filtros
            let searchTimeout;
            document.getElementById('searchClientes').addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(() => aplicarFiltros(1), 600);
            });

            ['filterTipo', 'filterStatus'].forEach(id => {
                document.getElementById(id).addEventListener('change', () => aplicarFiltros(1));
            });

            document.getElementById('pageSizeSelector').addEventListener('change', function() {
                aplicarFiltros(1);
            });

            // Esconder loading inicial
            forceHideLoading();
        });

        function aplicarFiltros(page = 1) {
            if (isLoadingVisible) {
                console.log('J√° carregando, ignorando nova requisi√ß√£o');
                return;
            }

            showLoading(true);

            const formData = new FormData(document.getElementById('filtrosForm'));
            const pageSize = document.getElementById('pageSizeSelector')?.value || 50;

            const params = new URLSearchParams();
            params.append('page', page);
            params.append('pageSize', pageSize);

            for (let [key, value] of formData.entries()) {
                if (value && value.trim() !== '') {
                    params.append(key, value);
                }
            }

            fetch(`/Clientes/GetClientesAjax?${params.toString()}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(html => {
                    const gridContainer = document.getElementById('gridContainer');
                    if (gridContainer) {
                        gridContainer.innerHTML = html;
                        updateUrl(params);

                        // Reinicializar dropdowns ap√≥s atualiza√ß√£o
                        setTimeout(() => {
                            if (window.initializeDropdowns) {
                                window.initializeDropdowns();
                            }
                        }, 100);
                    }
                })
                .catch(error => {
                    console.error('Erro ao carregar dados:', error);
                    showToast('Erro ao carregar dados: ' + error.message, 'error');
                })
                .finally(() => {
                    setTimeout(() => {
                        showLoading(false);
                    }, 300);
                });
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            if (!overlay) return;

            if (loadingTimeout) {
                clearTimeout(loadingTimeout);
                loadingTimeout = null;
            }

            if (show) {
                isLoadingVisible = true;
                overlay.classList.remove('d-none');
                overlay.style.display = 'flex';
                overlay.style.opacity = '1';
                overlay.style.visibility = 'visible';

                loadingTimeout = setTimeout(() => {
                    showLoading(false);
                }, 8000);
            } else {
                isLoadingVisible = false;
                overlay.style.opacity = '0';
                setTimeout(() => {
                    overlay.classList.add('d-none');
                    overlay.style.display = 'none';
                    overlay.style.visibility = 'hidden';
                }, 200);
            }
        }

        function forceHideLoading() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) {
                isLoadingVisible = false;
                overlay.classList.add('d-none');
                overlay.style.display = 'none';
                overlay.style.opacity = '0';
                overlay.style.visibility = 'hidden';
                if (loadingTimeout) {
                    clearTimeout(loadingTimeout);
                    loadingTimeout = null;
                }
            }
        }

        function changePage(page) {
            aplicarFiltros(page);
        }

        function updateUrl(params) {
            try {
                const newUrl = `${window.location.pathname}?${params.toString()}`;
                window.history.replaceState({}, '', newUrl);
            } catch (error) {
                console.error('Erro ao atualizar URL:', error);
            }
        }

        function limparFiltros() {
            const form = document.getElementById('filtrosForm');
            if (form) {
                form.reset();
            }
            const pageSize = document.getElementById('pageSizeSelector');
            if (pageSize) {
                pageSize.value = '50';
            }
            aplicarFiltros(1);
        }

        function novaVenda(clienteId) {
            window.location.href = `/Vendas/Create?clienteId=${clienteId}`;
        }

        // Event listeners globais
        window.addEventListener('load', function() {
            setTimeout(forceHideLoading, 1000);
        });

        window.addEventListener('error', function(event) {
            console.error('Erro JavaScript detectado:', event.error);
            forceHideLoading();
        });
    </script>
}