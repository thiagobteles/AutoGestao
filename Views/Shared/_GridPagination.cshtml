@model StandardGridViewModel

<div class="pagination-container">
    <nav aria-label="Navegação de páginas">
        <ul class="pagination">
            @if (Model.CurrentPage > 1)
            {
                var firstPageRouteValues = GetRouteValues(1);
                var prevPageRouteValues = GetRouteValues(Model.CurrentPage - 1);

                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", firstPageRouteValues)">«</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", prevPageRouteValues)">‹</a>
                </li>
            }

            @{
                var startPage = Math.Max(1, Model.CurrentPage - 2);
                var endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
            }

            @for (var i = startPage; i <= endPage; i++)
            {
                var pageRouteValues = GetRouteValues(i);
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", pageRouteValues)">@i</a>
                </li>
            }

            @if (Model.CurrentPage < Model.TotalPages)
            {
                var nextPageRouteValues = GetRouteValues(Model.CurrentPage + 1);
                var lastPageRouteValues = GetRouteValues(Model.TotalPages);

                
                @if (endPage < Model.TotalPages)
                {
                    <li class="page-item">
                        <span class="page-link">...</span>
                    </li>
                }
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", nextPageRouteValues)">›</a>
                </li>
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", lastPageRouteValues)">»</a>
                </li>
            }
        </ul>
    </nav>
</div>

@functions {
    private object GetRouteValues(int page)
    {
        var routeValues = new Dictionary<string, object>
        {
            ["page"] = page,
            ["pageSize"] = Model.PageSize,
            ["orderBy"] = Model.OrderBy ?? "id",
            ["orderDirection"] = Model.OrderDirection ?? "asc"
        };
        
        // Adicionar filtros ativos
        foreach (var filter in Model.Filters.Where(f => f.Value != null && !string.IsNullOrEmpty(f.Value.ToString())))
        {
            routeValues[filter.Name] = filter.Value;
        }
        
        return routeValues;
    }
}