@using AutoGestao.Enumerador.Gerais
@model StandardFormViewModel

<form asp-action="@Model.ActionName" method="post" class="slide-in-right standard-form" 
      data-ajax="@(Model.EnableAjaxSubmit ? "true" : "false")">
    
    @if (Model.IsEditMode && Model.Model != null)
    {
        <input type="hidden" name="Id" value="@((dynamic)Model.Model).Id" />
    }

    <div asp-validation-summary="ModelOnly" class="alert alert-danger" style="display: none;"></div>

    @foreach (var itemSection in Model.Sections)
    {
        <div class="card-modern mb-4">
            <div class="card-header-modern">
                <i class="@itemSection.Icon"></i>
                @itemSection.Name
            </div>
            <div class="card-body-modern">
                <div class="grid-@(itemSection.GridColumns)">
                @foreach (var field in itemSection.Fields.Where(x => x.Type != EnumFieldType.Hidden).OrderBy(f => f.Order))
    {
                        <div class="form-group-modern @field.CssClass"
                             data-field-name="@field.PropertyName"
                             data-conditional-display-rule="@field.ConditionalDisplayRule"
                             data-conditional-required-rule="@field.ConditionalRequiredRule"
                             style="@(!field.ShouldDisplay ? "display: none;" : string.Empty)">

                            <label class="form-label-modern">
                                <i class="@field.Icon me-1"></i>
                                @field.DisplayName
                                @if (field.Required && !Model.IsDetailsMode)
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>

                            @switch (field.Type)
                            {
                                case EnumFieldType.Text:
                                    <input type="text"
                                            class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@field.Placeholder"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "")
                                            @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : "") />
                                    break;

                                case EnumFieldType.Number:
                                    <input type="number"
                                            class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@field.Placeholder"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Email:
                                    <input type="email"
                                            class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@field.Placeholder"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Date:
                                    <input type="date"
                                            class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@(field.Value != null ? ((DateTime)field.Value).ToString("yyyy-MM-dd") : "")"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.DateTime:
                                    <input type="datetime-local"
                                            class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@(field.Value != null ? ((DateTime)field.Value).ToString("yyyy-MM-ddTHH:mm") : "")"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.TextArea:
                                    <textarea class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                                id="@field.PropertyName"
                                                name="@field.PropertyName"
                                                rows="3"
                                                placeholder="@field.Placeholder"
                                                @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                                @(field.ReadOnly ? "readonly" : string.Empty)>@field.Value</textarea>
                                    break;

                                case EnumFieldType.Select:
                                    <select class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "disabled" : string.Empty)>
                                        <option value="">Selecione...</option>
                                        @foreach (var option in field.Options)
                                        {
                                            <option value="@option.Value"
                                                selected = "@(field.Value?.ToString() == option.Value)">
                                                @option.Text
                                            </option>
                                        }
                                    </select>
                                    break;

                                case EnumFieldType.Checkbox:
                                    <div class="form-check">
                                        <input type="checkbox"
                                                class="form-check-input @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                                id="@field.PropertyName"
                                                name="@field.PropertyName"
                                                value="true"
                                                @(field.Value != null && (bool)field.Value ? "checked" : "")
                                                @(field.ReadOnly ? "disabled" : "") />
                                        <label class="form-check-label" for="@field.PropertyName">
                                            @if (!string.IsNullOrEmpty(field.Icon))
                                            {
                                                <i class="@field.Icon me-2"></i>
                                            }
                                            @field.DisplayName
                                        </label>
                                    </div>
                                    break;

                                case EnumFieldType.Currency:
                                    <input type="text"
                                            class="form-control currency-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "R$ 0,00" : field.Placeholder)"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Cpf:
                                    <input type="text"
                                            class="form-control cpf-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "000.000.000-00" : field.Placeholder)"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Cnpj:
                                    <input type="text"
                                            class="form-control cnpj-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "00.000.000/0000-00" : field.Placeholder)"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Phone:
                                    <input type="text"
                                            class="form-control phone-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "(00) 00000-0000" : field.Placeholder)"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Cep:
                                    <input type="text"
                                            class="form-control cep-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value"
                                            placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "00000-000" : field.Placeholder)"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Decimal:
                                    <input type="number"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           class="form-control-modern currency-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "0,00" : field.Placeholder)"
                                           @(field.Required && !Model.IsDetailsMode ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Percentage:
                                    var percentValue = field.Value?.ToString();
                                    if (!string.IsNullOrEmpty(percentValue) && !percentValue.Contains("%"))
                                    {
                                        percentValue += "%";
                                    }
                                    <input type="text"
                                           name="@field.PropertyName"
                                           value="@percentValue"
                                           class="form-control-modern percentage-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "1,50%" : field.Placeholder)"
                                           @(field.Required && !Model.IsDetailsMode ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Reference:
                                    @if (Model.IsDetailsMode)
                                    {
                                        <div class="form-control-static">
                                            <span id="@(field.PropertyName)_display">
                                                @if (field.Value != null && field.Value.ToString() != "0")
                                                {
                                                    <span class="text-muted">Carregando...</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Não informado</span>
                                                }
                                            </span>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="reference-search-wrapper">
                                            <input type="hidden"
                                                   name="@field.PropertyName"
                                                   value="@field.Value"
                                                   id="@(field.PropertyName)_value" />

                                            <div class="input-group">
                                                <input type="text"
                                                       class="form-control reference-search-input @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                                       id="@(field.PropertyName)_search"
                                                       placeholder="@(string.IsNullOrEmpty(field.Placeholder) ? "Digite para pesquisar..." : field.Placeholder)"
                                                       autocomplete="off"
                                                       data-reference-type="@field.Reference?.Name"
                                                       data-target-field="@field.PropertyName"
                                                       @(field.Required ? "required" : "") />

                                                <button type="button"
                                                        class="btn btn-success reference-create-btn"
                                                        id="@(field.PropertyName)_create"
                                                        title="Criar novo registro"
                                                        data-reference-type="@field.Reference?.Name"
                                                        data-target-field="@field.PropertyName">
                                                    <i class="fas fa-plus"></i>
                                                </button>

                                                <button type="button"
                                                        class="btn btn-outline-secondary reference-clear-btn"
                                                        id="@(field.PropertyName)_clear"
                                                        title="Limpar seleção">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>

                                            <div class="reference-dropdown" id="@(field.PropertyName)_dropdown"></div>
                                        </div>
                                    }
                                    break;

                                @* case EnumFieldType.Hidden:
                                    <input type="hidden"
                                            id="@field.PropertyName"
                                            name="@field.PropertyName"
                                            value="@field.Value" />
                                    break; *@

                                case EnumFieldType.Hidden:
                                    // Renderizar fora da estrutura de form-group para não ocupar espaço
                                    break;
                            }

                            @* Mensagens de validação *@
                            @if (HasValidationError(field.PropertyName))
                            {
                                <div class="invalid-feedback">
                                    @GetValidationError(field.PropertyName)
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(field.ValidationMessage))
                            {
                                <small class="form-text text-muted">@field.ValidationMessage</small>
                            }
                            else if (!string.IsNullOrEmpty(field.ConditionalRequiredMessage))
                            {
                                <small class="form-text text-muted">@field.ConditionalRequiredMessage</small>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (!Model.IsDetailsMode)
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <button type="button" class="btn-modern btn-outline-modern" onclick="window.history.back()">
                <i class="fas fa-arrow-left"></i>
                Cancelar
            </button>
            
            <div class="d-flex gap-2">
                <button type="button" class="btn-modern btn-outline-modern" onclick="limparFormulario()">
                    <i class="fas fa-eraser"></i>
                    Limpar
                </button>
                <button type="submit" class="btn-modern btn-primary-modern" id="submitBtn">
                    <i class="fas fa-save"></i>
                    @(Model.IsEditMode ? "Atualizar" : "Salvar")
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <a asp-action="Index" class="btn-modern btn-outline-modern">
                <i class="fas fa-arrow-left"></i>
                Voltar à Lista
            </a>
            
            @if (Model.Model != null)
            {
                <div class="d-flex gap-2">
                    <a asp-action="Edit" asp-route-id="@((dynamic)Model.Model).Id" class="btn-modern btn-primary-modern">
                        <i class="fas fa-edit"></i>
                        Editar
                    </a>
                </div>
            }
        </div>
    }
</form>

<script>
    function limparFormulario() {
        if (confirm('Tem certeza que deseja limpar todos os campos?')) {
            document.querySelector('.standard-form').reset();
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').remove();
            $('.alert-danger').hide();
        }
    }
</script>

@functions {
    bool HasValidationError(string fieldName)
    {
        return Model.ModelState.ContainsKey(fieldName);
    }

    string GetValidationError(string fieldName)
    {
        return Model.ModelState.TryGetValue(fieldName, out var error) ? error : "";
    }
}