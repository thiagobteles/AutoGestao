@* Views/Shared/_StandardFormContent.cshtml - VERSÃO CORRIGIDA MANTENDO FUNCIONALIDADES *@
@using AutoGestao.Enumerador.Gerais
@model StandardFormViewModel

@functions {
    string RenderConditionalAttributes(FormFieldViewModel field)
    {
        var attrs = new List<string>();

        // SEMPRE adicionar data-field-name para facilitar busca de DisplayName
        attrs.Add($"data-field-name=\"{field.PropertyName}\"");

        if (!string.IsNullOrEmpty(field.ConditionalDisplayRule))
        {
            attrs.Add($"data-conditional-display-rule=\"{field.ConditionalDisplayRule}\"");
        }

        if (!string.IsNullOrEmpty(field.ConditionalRequiredRule))
        {
            attrs.Add($"data-conditional-required-rule=\"{field.ConditionalRequiredRule}\"");

            if (!string.IsNullOrEmpty(field.ConditionalRequiredMessage))
            {
                attrs.Add($"data-conditional-required-message=\"{field.ConditionalRequiredMessage}\"");
            }
        }

        return string.Join(" ", attrs);
    }

    bool HasValidationError(string propertyName)
    {
        return Model.ModelState != null && Model.ModelState.ContainsKey(propertyName) && !string.IsNullOrEmpty(Model.ModelState[propertyName]);
    }

    string GetValidationError(string propertyName)
    {
        if (Model.ModelState != null && Model.ModelState.ContainsKey(propertyName))
        {
            return Model.ModelState[propertyName];
        }

        return string.Empty;
    }

    // NOVA FUNÇÃO: Formatar valor de data de forma segura
    string FormatDateValue(object value)
    {
        if (value == null) return "";

        // Se já é string, retornar diretamente
        if (value is string strValue)
        {
            return strValue;
        }

        // Se é DateTime, formatar
        if (value is DateTime dateValue)
        {
            return dateValue.ToString("yyyy-MM-dd");
        }

        return "";
    }

    // NOVA FUNÇÃO: Formatar valor de datetime de forma segura
    string FormatDateTimeValue(object value)
    {
        if (value == null) return "";

        // Se já é string, retornar diretamente
        if (value is string strValue)
        {
            return strValue;
        }

        // Se é DateTime, formatar
        if (value is DateTime dateTimeValue)
        {
            return dateTimeValue.ToString("yyyy-MM-ddTHH:mm");
        }

        return "";
    }
}

<form asp-action="@Model.ActionName" method="post" class="slide-in-right standard-form"
      data-ajax="@(Model.EnableAjaxSubmit ? "true" : "false")">

    @* CAMPOS HIDDEN OBRIGATÓRIOS PARA EDIÇÃO *@
    @if (Model.IsEditMode && Model.Model != null)
    {
        var dynamicModel = (dynamic)Model.Model;
        <input type="hidden" name="Id" value="@dynamicModel.Id" />

        @* Se a entidade herda de BaseEntidadeEmpresa, incluir IdEmpresa *@
        @if (Model.Model.GetType().IsSubclassOf(typeof(AutoGestao.Entidades.BaseEntidade)) ||
            Model.Model.GetType() == typeof(AutoGestao.Entidades.BaseEntidade))
        {
            <input type="hidden" name="IdEmpresa" value="@dynamicModel.IdEmpresa" />
        }

        @* Campos de auditoria - preservar valores originais *@
        @try
        {
            <input type="hidden" name="DataCadastro" value="@dynamicModel.DataCadastro" />
            <input type="hidden" name="DataAlteracao" value="@dynamicModel.DataAlteracao" />

            @if (dynamicModel.CriadoPorUsuarioId != null && dynamicModel.CriadoPorUsuarioId > 0)
            {
                <input type="hidden" name="CriadoPorUsuarioId" value="@dynamicModel.CriadoPorUsuarioId" />
            }
        }
        catch
        {
            // Ignore se a entidade não tem campos de auditoria
        }
    }

    <div asp-validation-summary="ModelOnly" class="alert alert-danger" style="display: none;"></div>

    @foreach (var itemSection in Model.Sections)
    {
        <div class="card-modern mb-4">
            <div class="card-header-modern">
                <i class="@itemSection.Icon"></i>
                @itemSection.Name
            </div>
            <div class="card-body-modern">
                <div class="grid-@(itemSection.GridColumns)">
                    @foreach (var field in itemSection.Fields.Where(x => x.Type != EnumFieldType.Hidden).OrderBy(f => f.Order))
                    {
                        <div class="form-group-modern @field.CssClass"
                             @Html.Raw(RenderConditionalAttributes(field))
                             style="@(!field.ShouldDisplay ? "display: none;" : "")">

                            <label class="form-label-modern">
                                <i class="@field.Icon me-1"></i>
                                @field.DisplayName
                                @if (field.Required && !Model.IsDetailsMode)
                                {
                                    <span class="text-danger">*</span>
                                }
                            </label>

                            @switch (field.Type)
                            {
                                case EnumFieldType.Text:
                                    <input type="text"
                                           class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : "") />
                                    break;

                                case EnumFieldType.Number:
                                    <input type="number"
                                           class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Email:
                                    <input type="email"
                                           class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Date:
                                    @* CORREÇÃO: Usar função segura para formatar data *@
                                    <input type="date"
                                           class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@FormatDateValue(field.Value)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.DateTime:
                                    @* CORREÇÃO: Usar função segura para formatar datetime *@
                                    <input type="datetime-local"
                                           class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@FormatDateTimeValue(field.Value)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.TextArea:
                                    <textarea id="@field.PropertyName"
                              class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                              name="@field.PropertyName"
                              rows="3"
                              placeholder="@(field.ReadOnly ? "" : field.Placeholder)"
                              @(field.Required || field.IsConditionallyRequired ? "required" : "")
                              @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty)
                              @(field.ReadOnly ? "readonly" : string.Empty)>@field.Value</textarea>
                                    break;

                                case EnumFieldType.Select:
                                    <select id="@field.PropertyName"
                                            class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                            name="@field.PropertyName"
                                            @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                            @(field.ReadOnly ? "disabled" : string.Empty)>
                                        <option value="">Selecione...</option>
                                        @{
                                            var selectedValue = field.Value?.ToString() ?? "";
                                        }

                                        @foreach (var option in field.Options)
                                        {
                                            <option value="@option.Value"
                                                    selected="@(selectedValue == option.Value)">
                                                @option.Text
                                            </option>
                                        }
                                    </select>
                                    break;

                                case EnumFieldType.Checkbox:
                                    <div class="form-check">
                                        <input type="checkbox"
                                               class="form-check-input @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                               id="@field.PropertyName"
                                               name="@field.PropertyName"
                                               value="true"
                                               @(field.Value != null && (field.Value.ToString().ToLower() == "true" || (field.Value is bool && (bool)field.Value)) ? "checked" : "")
                                               @(field.ReadOnly ? "disabled" : "") />
                                        <label class="form-check-label" for="@field.PropertyName">
                                            @if (!string.IsNullOrEmpty(field.Icon))
                                            {
                                                <i class="@field.Icon me-2"></i>
                                            }
                                            @field.DisplayName
                                        </label>
                                    </div>
                                    break;

                                case EnumFieldType.Currency:
                                    <input type="text"
                                           class="form-control money-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : string.IsNullOrEmpty(field.Placeholder) ? "R$ 0,00" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Decimal:
                                    <input type="number"
                                           step="0.01"
                                           class="form-control @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "") />
                                    break;

                                case EnumFieldType.Cpf:
                                    <input type="text"
                                           class="form-control cpf-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : string.IsNullOrEmpty(field.Placeholder) ? "000.000.000-00" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Cnpj:
                                    <input type="text"
                                           class="form-control cnpj-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : string.IsNullOrEmpty(field.Placeholder) ? "00.000.000/0000-00" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Telefone:
                                    <input type="text"
                                           class="form-control telefone-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : string.IsNullOrEmpty(field.Placeholder) ? "(00) 00000-0000" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Cep:
                                    <input type="text"
                                           class="form-control cep-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@field.Value"
                                           placeholder="@(field.ReadOnly ? "" : string.IsNullOrEmpty(field.Placeholder) ? "00000-000" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Percentage:
                                    var percentValue = field.Value?.ToString().Replace("%", "");
                                    <input type="text"
                                           class="form-control percentage-mask @(HasValidationError(field.PropertyName) ? "is-invalid" : "")"
                                           id="@field.PropertyName"
                                           name="@field.PropertyName"
                                           value="@percentValue"
                                           placeholder="@(field.ReadOnly ? "" : string.IsNullOrEmpty(field.Placeholder) ? "0,00%" : field.Placeholder)"
                                           @(field.Required || field.IsConditionallyRequired ? "required" : "")
                                           @(field.ReadOnly ? "readonly" : "")
                                           @(!string.IsNullOrEmpty(field.ValidationRegex) ? $"pattern=\"{field.ValidationRegex}\"" : string.Empty) />
                                    break;

                                case EnumFieldType.Reference:
                                    @await Html.PartialAsync("_ReferenceField", field)
                                    break;

                                case EnumFieldType.Image:
                                case EnumFieldType.File:
                                    <div class="@(field.Type == EnumFieldType.Image ? "image-upload-container" : "file-upload-container")">
                                        @if (!string.IsNullOrEmpty(field.FileUrl))
                                        {
                                            @* ===== PREVIEW DO ARQUIVO JÁ EXISTENTE ===== *@
                                            @if (field.Type == EnumFieldType.Image)
                                            {
                                                var sizes = field.ImageSize.Split('x');
                                                var width = sizes.Length > 0 ? sizes[0] : "150";
                                                var height = sizes.Length > 1 ? sizes[1] : "150";

                                                <div class="image-preview-wrapper position-relative">
                                                    <img src="@field.FileUrl"
                                                         alt="@field.DisplayName"
                                                         class="image-preview"
                                                         style="width: @(width)px; height: @(height)px; object-fit: cover; border-radius: 8px; border: 2px solid #dee2e6;"
                                                         onerror="console.error('Erro ao carregar imagem:', this.src); this.style.display='none'; this.nextElementSibling.style.display='flex';">

                                                    @* Fallback se a imagem não carregar *@
                                                    <div class="image-error-placeholder d-none align-items-center justify-content-center"
                                                         style="width: @(width)px; height: @(height)px; background: #f8f9fa; border: 2px dashed #dee2e6; border-radius: 8px;">
                                                        <div class="text-center text-muted">
                                                            <i class="fas fa-image fs-1"></i>
                                                            <div class="small mt-2">Erro ao carregar imagem</div>
                                                        </div>
                                                    </div>

                                                    @if (!field.ReadOnly)
                                                    {
                                                        <button type="button"
                                                                class="btn btn-sm btn-danger btn-delete-file position-absolute"
                                                                data-property="@field.PropertyName"
                                                                data-filepath="@field.FilePath"
                                                                style="top: 5px; right: 5px; z-index: 10;"
                                                                title="Excluir imagem">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="file-info d-flex align-items-center gap-2 p-3 border rounded">
                                                    <i class="fas fa-file-pdf text-danger fs-3"></i>
                                                    <div class="flex-grow-1">
                                                        <div class="fw-semibold">@field.FileName</div>
                                                        <small class="text-muted">PDF</small>
                                                    </div>
                                                    <a href="@field.FileUrl" target="_blank" class="btn btn-sm btn-outline-primary" title="Visualizar">
                                                        <i class="fas fa-eye"></i>
                                                    </a>
                                                    @if (!field.ReadOnly)
                                                    {
                                                        <button type="button"
                                                                class="btn btn-sm btn-danger btn-delete-file"
                                                                data-property="@field.PropertyName"
                                                                data-filepath="@field.FilePath"
                                                                title="Excluir arquivo">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </div>
                                            }
                                        }
                                        else if (!field.ReadOnly)
                                        {
                                            @* ===== CAMPO DE UPLOAD (SEM ARQUIVO) ===== *@
                                            <div class="file-upload-wrapper">
                                                @* IMPORTANTE: Input file SEM atributo name! *@
                                                <input type="file"
                                                       class="form-control file-input"
                                                       id="file_@field.PropertyName"
                                                       data-property="@field.PropertyName"
                                                       data-image-size="@field.ImageSize"
                                                       @if (field.Type == EnumFieldType.Image)
                                                       {
                                                           @:accept="image/*"
                                                       }
                                                       else if (!string.IsNullOrEmpty(field.AllowedExtensions))
                                                       {
                                                           var accepts = string.Join(",", field.AllowedExtensions.Split(',').Select(e => $".{e.Trim()}"));
                                                           @:accept="@accepts"
                                                       }
                     />

                                                <label for="file_@field.PropertyName" class="file-upload-label">
                                                    <span class="file-upload-btn">
                                                        <i class="fas fa-upload file-upload-icon"></i> Escolher @(field.Type == EnumFieldType.Image ? "Imagem" : "Arquivo")
                                                    </span>
                                                    <span class="file-upload-text">Nenhum arquivo selecionado</span>
                                                </label>
                                            </div>

                                            @if (!string.IsNullOrEmpty(field.AllowedExtensions))
                                            {
                                                <div class="form-text mt-2">
                                                    <i class="fas fa-info-circle me-1"></i>Formatos permitidos: <strong>@field.AllowedExtensions.ToUpper()</strong>
                                                </div>
                                            }
                                            @if (field.MaxSizeMB > 0)
                                            {
                                                <div class="form-text">
                                                    <i class="fas fa-weight-hanging me-1"></i>Tamanho máximo: <strong>@field.MaxSizeMB MB</strong>
                                                </div>
                                            }
                                        }

                                        @* ===== INPUT HIDDEN - ÚNICO COM ATRIBUTO NAME ===== *@
                                        <input type="hidden"
                                               name="@field.PropertyName"
                                               id="hidden_@field.PropertyName"
                                               value="@(field.FilePath ?? "")"
                                               class="file-path-input"
                                               data-property="@field.PropertyName" />

                                        @if (HasValidationError(field.PropertyName))
                                        {
                                            <div class="invalid-feedback d-block">
                                                @GetValidationError(field.PropertyName)
                                            </div>
                                        }
                                    </div>
                                    break;

                                case EnumFieldType.Hidden:
                                    // Renderizar fora da estrutura de form-group para não ocupar espaço
                                    break;
                            }

                            @* Mensagens de validação *@
                            @if (HasValidationError(field.PropertyName))
                            {
                                <div class="invalid-feedback">
                                    @GetValidationError(field.PropertyName)
                                </div>
                            }
                            else if (!string.IsNullOrEmpty(field.ValidationMessage))
                            {
                                <small class="form-text text-muted">@field.ValidationMessage</small>
                            }
                            else if (!string.IsNullOrEmpty(field.ConditionalRequiredMessage))
                            {
                                <small class="form-text text-muted">@field.ConditionalRequiredMessage</small>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }

    @if (!Model.IsDetailsMode)
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <button type="button" class="btn-modern btn-outline-modern" onclick="window.history.back()">
                <i class="fas fa-arrow-left"></i>
                Cancelar
            </button>

            <div class="d-flex gap-2">
                <button type="button" class="btn-modern btn-outline-modern" onclick="limparFormulario()">
                    <i class="fas fa-eraser"></i>
                    Limpar
                </button>
                <button type="submit" class="btn-modern btn-primary-modern" id="submitBtn">
                    <i class="fas fa-save"></i>
                    @(Model.IsEditMode ? "Atualizar" : "Salvar")
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mt-4">
            <a asp-action="Index" class="btn-modern btn-outline-modern">
                <i class="fas fa-arrow-left"></i>
                Voltar à Lista
            </a>

            @if (Model.Model != null)
            {
                <div class="d-flex gap-2">
                    <a asp-action="Edit" asp-route-id="@((dynamic)Model.Model).Id" class="btn-modern btn-primary-modern">
                        <i class="fas fa-edit"></i>
                        Editar
                    </a>
                </div>
            }
        </div>
    }
</form>

<script>
    function limparFormulario() {
        if (confirm('Tem certeza que deseja limpar todos os campos?')) {
            document.querySelector('.standard-form').reset();
            $('.is-invalid').removeClass('is-invalid');
            $('.invalid-feedback').remove();
            $('.alert-danger').hide();
        }
    }

    function clearReferenceField(fieldName) {
        const hiddenInput = document.getElementById(fieldName + '_value');
        const searchInput = document.getElementById(fieldName + '_search');

        if (hiddenInput) {
            hiddenInput.value = '0';
            hiddenInput.dispatchEvent(new Event('change', { bubbles: true }));
        }

        if (searchInput) {
            searchInput.value = '';
            searchInput.classList.remove('selected');
        }
    }
</script>