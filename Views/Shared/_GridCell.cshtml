@model GridCellViewModel
@using AutoGestao.Enumerador.Gerais
@using AutoGestao.Extensions
@using AutoGestao.Models
@using AutoGestao.Models.Grid

@{
    var itemType = Model.Item.GetType();
    var propertyInfo = itemType.GetProperty(Model.Column.Name);
    var value = propertyInfo?.GetValue(Model.Item);
}

@switch (Model.Column.Type)
{
    case EnumGridColumnType.Actions:
        @if (Model.Actions != null && Model.Actions.Any())
        {
            var visibleActions = Model.Actions.Where(action => action.ShowCondition == null || action.ShowCondition(Model.Item)).ToList();
            @if (visibleActions.Any())
            {
                var itemId = itemType.GetProperty("Id")?.GetValue(Model.Item)?.ToString();

                <!-- DROPDOWN CONTAINER -->
                <div class="action-dropdown-container" data-item-id="@itemId">
                    <button type="button"
                            class="btn-actions-enhanced"
                            data-dropdown-toggle="dropdown-@itemId"
                            aria-expanded="false"
                            title="Ações disponíveis">
                        <i class="fas fa-ellipsis-v"></i>
                    </button>

                    <!-- DROPDOWN ITEMS DATA (Hidden, usado pelo JS) -->
                    <script type="application/json" class="dropdown-data">
                        {
                            "actions": [
                                @foreach (var action in visibleActions)
                                {
                                        var actionUrl = action.Url?.Replace("{id}", itemId);
                                        <text>{
                                            "name": "@action.Name",
                                            "displayName": "@action.DisplayName",
                                            "icon": "@action.Icon",
                                            "url": "@actionUrl",
                                            "cssClass": "@(action.Name.ToLower().Contains("delete") || action.Name.ToLower().Contains("excluir") ? "text-danger" : "")"
                                        }</text>
                                        @if (action != visibleActions.Last())
                                        {
                                            <text>,</text>
                                        }
                                }
                            ]
                        }
                    </script>
                </div>
            }
        }
        break;

    case EnumGridColumnType.Enumerador:
        @try
        {
            var displayText = value?.ToString();
            if (value is Enum enumValue)
            {
                var icone = enumValue.GetIcone();
                var descricao = enumValue.GetDescription();

                if (Model.Column.EnumRender == EnumRenderType.Icon)
                {
                    // Mostra apenas o ícone se existir, senão mostra a descrição
                    displayText = !string.IsNullOrEmpty(icone) ? icone : descricao;
                }
                else if (Model.Column.EnumRender == EnumRenderType.IconDescription)
                {
                    // Mostra ícone + descrição apenas se tiver ícone, senão apenas descrição
                    displayText = !string.IsNullOrEmpty(icone)
                        ? $"{icone} {descricao}"
                        : descricao;
                }
                else if (Model.Column.EnumRender == EnumRenderType.DescriptionIcon)
                {
                    // Mostra descrição + ícone apenas se tiver ícone, senão apenas descrição
                    displayText = !string.IsNullOrEmpty(icone)
                        ? $"{descricao} {icone}"
                        : descricao;
                }
                else
                {
                    // EnumRenderType.Description - mostra apenas a descrição
                    displayText = descricao;
                }
            }
            else if (value != null && bool.TryParse(value.ToString(), out bool enumBoolValue))
            {
                <span class="status-badge @(enumBoolValue ? "status-active" : "status-inactive")">
                    @(enumBoolValue ? "✅" : "❌")
                </span>
                break;
            }

            <span class="person-type">@displayText</span>
        }
        catch
        {
            @value
        }
        break;

    case EnumGridColumnType.Currency:
        @if (value != null)
        {
            decimal currencyValue = 0;
            bool parsed = false;

            if (value is decimal decVal)
            {
                currencyValue = decVal;
                parsed = true;
            }
            else if (decimal.TryParse(value.ToString(), out decimal parsedVal))
            {
                currencyValue = parsedVal;
                parsed = true;
            }

            if (parsed)
            {
                <span class="currency-value">@currencyValue.ToString("C2")</span>
            }
            else
            {
                <span class="text-muted">-</span>
            }
        }
        else
        {
            <span class="text-muted">-</span>
        }
        break;

    case EnumGridColumnType.Date:
        @if (value != null && DateTime.TryParse(value.ToString(), out DateTime dateValue))
        {
            @dateValue.ToString("dd/MM/yyyy")
        }
        else
        {
            <span class="text-muted">-</span>
        }
        break;

    case EnumGridColumnType.Number:
        @if (value != null)
        {
            decimal numberValue = 0;
            bool parsed = false;

            if (value is decimal decVal)
            {
                numberValue = decVal;
                parsed = true;
            }
            else if (decimal.TryParse(value.ToString(), out decimal parsedVal))
            {
                numberValue = parsedVal;
                parsed = true;
            }

            if (parsed)
            {
                // Usar o formato especificado na coluna, ou N0 como padrão
                var format = !string.IsNullOrEmpty(Model.Column.Format) ? Model.Column.Format : "N0";

                // Se o formato for P (porcentagem), dividir por 100
                if (format.StartsWith("P", StringComparison.OrdinalIgnoreCase))
                {
                    numberValue = numberValue / 100;
                }

                <span class="number-value">@numberValue.ToString(format)</span>
            }
            else
            {
                <span class="text-muted">-</span>
            }
        }
        else
        {
            <span class="text-muted">-</span>
        }
        break;

    case EnumGridColumnType.Integer:
        @if (value != null && long.TryParse(value.ToString(), out long integerValue))
        {
            @integerValue.ToString()
        }
        else
        {
            <span class="text-muted">-</span>
        }
        break;

    case EnumGridColumnType.Boolean:
        @if (value != null && bool.TryParse(value.ToString(), out bool boolValue))
        {
            <span class="status-badge @(boolValue ? "status-active" : "status-inactive")">
                <i class="fas @(boolValue ? "fa-check" : "fa-times")"></i>
                @(boolValue ? "Sim" : "Não")
            </span>
        }
        else
        {
            <span class="text-muted">-</span>
        }
        break;

    case EnumGridColumnType.Custom:
        @if (Model.Column.CustomRender != null)
        {
            @Html.Raw(Model.Column.CustomRender(Model.Item))
        }
        else
        {
            @(value ?? "-")
        }
        break;

    default:
        @if (!string.IsNullOrEmpty(Model.Column.UrlAction))
        {
            <a href="@Url.Action(Model.Column.UrlAction, new { id = itemType.GetProperty("Id")?.GetValue(Model.Item) })"
               class="text-decoration-none text-primary fw-medium text-truncate">
                @value
            </a>
        }
        else
        {
            <span class="text-truncate" title="@value">@(value ?? "-")</span>
        }
        break;
}