@model FormFieldViewModel
@using AutoGestao.Enumerador.Gerais

<div class="form-group mb-3"
     data-field-name="@Model.PropertyName"
     @if (!string.IsNullOrEmpty(Model.ConditionalDisplayRule))
     {
         @:data-conditional-display-rule="@Model.ConditionalDisplayRule"
     }
     @if (!string.IsNullOrEmpty(Model.ConditionalRequiredRule))
     {
         @:data-conditional-required-rule="@Model.ConditionalRequiredRule"
     }
     @if (!string.IsNullOrEmpty(Model.ConditionalRequiredMessage))
     {
         @:data-conditional-required-message="@Model.ConditionalRequiredMessage"
     }>
    @if (Model.Type != EnumFieldType.Hidden)
    {
        <label for="@Model.PropertyName" class="form-label">
            @if (!string.IsNullOrEmpty(Model.Icon))
            {
                <i class="@Model.Icon me-1"></i>
            }
            @Model.DisplayName
            @if (Model.Required || Model.IsConditionallyRequired)
            {
                <span class="text-danger">*</span>
            }
        </label>
    }

    @{
        var fieldValue = Model.Value?.ToString() ?? "";
    }

    @switch (Model.Type)
    {
        case EnumFieldType.Text:
        case EnumFieldType.Email:
        case EnumFieldType.Url:
            <input type="@Model.Type.ToString().ToLower()"
                   class="form-control"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Number:
        case EnumFieldType.Decimal:
            <input type="number"
                   class="form-control"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : Model.Placeholder)"
                   step="@(Model.Type == EnumFieldType.Decimal ? "0.01" : "1")"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Currency:
            <input type="text"
                   class="form-control money-mask"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Date:
            <input type="date"
                   class="form-control"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.DateTime:
            <input type="datetime-local"
                   class="form-control"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Time:
            <input type="time"
                   class="form-control"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.TextArea:
            <textarea class="form-control"
                      id="@Model.PropertyName"
                      name="@Model.PropertyName"
                      rows="4"
                      placeholder="@(Model.ReadOnly ? "" : Model.Placeholder)"
                      @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                      @(Model.ReadOnly ? "readonly" : "") >@fieldValue</textarea>
            break;

        case EnumFieldType.Checkbox:
            <div class="form-check">
                <input type="checkbox"
                       class="form-check-input"
                       id="@Model.PropertyName"
                       name="@Model.PropertyName"
                       value="true"
                       @(fieldValue.ToLower() == "true" ? "checked" : "")
                       @(Model.ReadOnly ? "disabled" : "") />
                <label class="form-check-label" for="@Model.PropertyName">
                    @Model.DisplayName
                </label>
            </div>
            break;

        case EnumFieldType.Select:
            <select class="form-select"
                    id="@Model.PropertyName"
                    name="@Model.PropertyName"
                    @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                    @(Model.ReadOnly ? "disabled" : "") >
                <option value="">Selecione...</option>
                @if (Model.Options != null)
                {
                    @foreach (var optionAtual in Model.Options)
                    {
                        <option value="@optionAtual.Value" selected = "@(optionAtual.Value == fieldValue)">
                            @optionAtual.Text
                        </option>
                    }
                }
            </select>
            break;

        case EnumFieldType.Reference:
            @await Html.PartialAsync("_ReferenceField", Model)
            break;

        case EnumFieldType.Cpf:
            <input type="text"
                   class="form-control cpf-mask"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : string.IsNullOrEmpty(Model.Placeholder) ? "000.000.000-00" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Cnpj:
            <input type="text"
                   class="form-control cnpj-mask"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : string.IsNullOrEmpty(Model.Placeholder) ? "00.000.000/0000-00" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Telefone:
            <input type="text"
                   class="form-control telefone-mask"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : string.IsNullOrEmpty(Model.Placeholder) ? "(00) 00000-0000" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Cep:
            <input type="text"
                   class="form-control cep-mask"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : string.IsNullOrEmpty(Model.Placeholder) ? "00000-000" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Placa:
            <input type="text"
                   class="form-control placa-mask"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue"
                   placeholder="@(Model.ReadOnly ? "" : string.IsNullOrEmpty(Model.Placeholder) ? "ABC-1234" : Model.Placeholder)"
                   @(Model.Required || Model.IsConditionallyRequired ? "required" : "")
                   @(Model.ReadOnly ? "readonly" : "") />
            break;

        case EnumFieldType.Hidden:
            <input type="hidden"
                   id="@Model.PropertyName"
                   name="@Model.PropertyName"
                   value="@fieldValue" />
            break;
    }

    @if (!string.IsNullOrEmpty(Model.ValidationMessage))
    {
        <small class="form-text text-muted">@Model.ValidationMessage</small>
    }
</div>