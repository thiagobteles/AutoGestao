@* Views/Shared/_ModalForm.cshtml - GARANTIR CAMPOS OBRIGATÓRIOS *@
@model StandardFormViewModel
@{
    Layout = null;
}

<form method="post"
      action="/@Model.ControllerName/@Model.ActionName@(Model.ActionName == "Edit" && Model.Model != null ? $"/{((dynamic)Model.Model).Id}" : "")"
      class="modal-form-container"
      enctype="multipart/form-data"
      novalidate
      id="modalForm">

    @* CAMPOS HIDDEN OBRIGATÓRIOS *@
    @if (Model.Model != null)
    {
        var idProperty = Model.Model.GetType().GetProperty("Id");
        if (idProperty != null)
        {
            var idValue = idProperty.GetValue(Model.Model);
            <input type="hidden" name="Id" value="@idValue" />
            @* LOG *@
            <script>console.log('Campo Id adicionado:', @idValue);</script>
        }

        var idEmpresaProperty = Model.Model.GetType().GetProperty("IdEmpresa");
        if (idEmpresaProperty != null)
        {
            var idEmpresaValue = idEmpresaProperty.GetValue(Model.Model);
            <input type="hidden" name="IdEmpresa" value="@idEmpresaValue" />
            @* LOG *@
            <script>console.log('Campo IdEmpresa adicionado:', @idEmpresaValue);</script>
        }
    }
    else
    {
        @* Em modo CREATE, adicionar IdEmpresa do contexto *@
        @if (ViewContext.HttpContext.User.Identity.IsAuthenticated)
        {
            var idEmpresaClaim = ViewContext.HttpContext.User.Claims.FirstOrDefault(c => c.Type == "IdEmpresa");
            if (idEmpresaClaim != null)
            {
                <input type="hidden" name="IdEmpresa" value="@idEmpresaClaim.Value" />
                @* LOG *@
                <script>console.log('Campo IdEmpresa (create) adicionado:', @idEmpresaClaim.Value);</script>
            }
        }
    }

    @Html.AntiForgeryToken()

    @if (Model.ModelState != null && Model.ModelState.Count > 0)
    {
        <div class="alert alert-danger alert-dismissible fade show mb-3" role="alert">
            <div class="d-flex align-items-start">
                <i class="fas fa-exclamation-triangle fa-2x me-3"></i>
                <div>
                    <strong>Erro de validação!</strong>
                    <ul class="mb-0 mt-2">
                        @foreach (var error in Model.ModelState)
                        {
                            <li>@error.Value</li>
                        }
                    </ul>
                </div>
            </div>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="modal-form-content">
        @foreach (var sectionItem in Model.Sections)
        {
            <div class="form-section mb-3">
                @if (!string.IsNullOrEmpty(sectionItem.Name))
                {
                    <div class="section-header mb-3">
                        <h6 class="section-title mb-0">
                            @if (!string.IsNullOrEmpty(sectionItem.Icon))
                            {
                                <i class="@sectionItem.Icon me-2"></i>
                            }
                            @sectionItem.Name
                        </h6>
                    </div>
                }

                <div class="form-grid grid-cols-@sectionItem.GridColumns">
                    @foreach (var field in sectionItem.Fields.Where(f => f.ShouldDisplay).OrderBy(f => f.Order))
                    {
                        // Calcular span correto:
                        // GridColumns do campo indica "quantos campos desse tipo cabem por linha"
                        // Então span = totalColunasDaSeção / GridColumnsDoField
                        // Exemplo: seção com 3 colunas, campo com GridColumns=3 → span = 3/3 = 1 (1/3 da linha)
                        //          seção com 3 colunas, campo com GridColumns=1 → span = 3/1 = 3 (linha inteira)
                        var span = sectionItem.GridColumns / field.GridColumns;
                        <div class="form-field-wrapper" style="grid-column: span @span;">
                            @await Html.PartialAsync("_FormField", field)
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</form>

<style>
    .modal-form-container {
        width: 100%;
        height: 100%;
    }

    .modal-form-content {
        max-height: calc(80vh - 200px);
        overflow-y: auto;
        padding: 1.5rem;
        padding-right: 10px;
    }

        .modal-form-content::-webkit-scrollbar {
            width: 8px;
        }

        .modal-form-content::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .modal-form-content::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }

            .modal-form-content::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

    .modal-form-container .form-section {
        background: white;
        border-radius: 8px;
        padding: 1.5rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        border: 1px solid #e9ecef;
    }

    .modal-form-container .section-header {
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 0.75rem;
        margin-bottom: 1rem;
    }

    .modal-form-container .section-title {
        color: #495057;
        font-weight: 600;
        font-size: 1rem;
        margin: 0;
    }

    .modal-form-container .form-grid {
        display: grid;
        gap: 1rem;
    }

        .modal-form-container .form-grid.grid-cols-1 {
            grid-template-columns: repeat(1, 1fr);
        }

        .modal-form-container .form-grid.grid-cols-2 {
            grid-template-columns: repeat(2, 1fr);
        }

        .modal-form-container .form-grid.grid-cols-3 {
            grid-template-columns: repeat(3, 1fr);
        }

        .modal-form-container .form-grid.grid-cols-4 {
            grid-template-columns: repeat(4, 1fr);
        }

        .modal-form-container .form-grid.grid-cols-5 {
            grid-template-columns: repeat(5, 1fr);
        }

        .modal-form-container .form-grid.grid-cols-6 {
            grid-template-columns: repeat(6, 1fr);
        }

    .modal-form-container .form-field-wrapper {
        min-width: 0;
    }

    .modal-form-container .form-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.5rem;
        display: block;
        font-size: 0.875rem;
    }

    .modal-form-container .form-control,
    .modal-form-container .form-select {
        border-radius: 6px;
        border: 1px solid #ced4da;
        padding: 0.625rem 0.875rem;
        font-size: 0.875rem;
        width: 100%;
    }

        .modal-form-container .form-control:focus,
        .modal-form-container .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
            outline: none;
        }

    .modal-form-container .invalid-feedback {
        display: block;
        margin-top: 0.25rem;
        font-size: 0.8125rem;
        color: #dc3545;
    }

    .modal-form-container .is-invalid {
        border-color: #dc3545;
    }

    @@media (max-width: 992px) {
        .modal-form-container .form-grid.grid-cols-4, .modal-form-container .form-grid.grid-cols-5, .modal-form-container .form-grid.grid-cols-6
        {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (max-width: 768px) {
        .modal-form-container .form-grid {
            grid-template-columns: 1fr !important;
        }

        .modal-form-container .form-field-wrapper {
            grid-column: span 1 !important;
        }

        .modal-form-content {
            max-height: calc(100vh - 200px);
        }
    }
</style>