@using AutoGestao.Entidades
@using AutoGestao.Entidades.Leads
@using AutoGestao.Entidades.Veiculos
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - @Globais.NomeApresentacao</title>

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/custom.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reference-field.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/file-upload.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/grid-system.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/complete-modal-styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />

</head>
<body>
    <div class="layout-wrapper">
        <!-- Sidebar -->
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-brand">
                <a href="@Url.Action("Index", "Home")" class="brand-logo">
                    <i class="fas fa-car"></i>
                    <div class="brand-text-content">
                        <span>AutoGestão</span>
                    </div>
                </a>
                <button class="sidebar-collapse-btn" id="sidebarCollapseBtn" title="Recolher Menu">
                    <i class="fas fa-chevron-left"></i>
                </button>
            </div>

            <nav class="sidebar-menu">
                <!-- Principal -->
                <div class="menu-section">
                    <div class="menu-section-title">Principal</div>
                    <div class="menu-item">
                        <a href="@Url.Action("Index", "Home")" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == "Home" ? "active" : "")">
                            <i class="fas fa-tachometer-alt"></i>
                            <span class="menu-link-text">Dashboard</span>
                            <div class="menu-tooltip">Dashboard</div>
                        </a>
                    </div>
                </div>

                <!-- Cadastros -->
                <div class="menu-section">
                    <div class="menu-section-title">Cadastros</div>
                    @if (Globais.EhAutoGestao)
                    {
                        <div class="menu-item">
                            <a href="@Url.Action("Index", nameof(Veiculo))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Veiculo) ? "active" : "")">
                                <i class="fas fa-car"></i>
                                <span class="menu-link-text">Veículos</span>
                                <div class="menu-tooltip">Veículos</div>
                            </a>
                        </div>
                    }
                    <div class="menu-item">
                        <a href="@Url.Action("Index", nameof(Lead))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Lead) ? "active" : "")">
                            <i class="fas fa-newspaper"></i>
                            <span class="menu-link-text">Leads</span>
                            <div class="menu-tooltip">Leads</div>
                        </a>
                    </div>
                    <div class="menu-item">
                        <a href="@Url.Action("Index", nameof(Cliente))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Cliente) ? "active" : "")">
                            <i class="fas fa-users"></i>
                            <span class="menu-link-text">Clientes</span>
                            <div class="menu-tooltip">Clientes</div>
                        </a>
                    </div>
                    <div class="menu-item">
                        <a href="@Url.Action("Index", nameof(Vendedor))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Vendedor) ? "active" : "")">
                            <i class="fas fa-user-tie"></i>
                            <span class="menu-link-text">Vendedores</span>
                            <div class="menu-tooltip">Vendedores</div>
                        </a>
                    </div>
                    <div class="menu-item">
                        <a href="@Url.Action("Index", nameof(Fornecedor))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Fornecedor) ? "active" : "")">
                            <i class="fas fa-truck"></i>
                            <span class="menu-link-text">Fornecedores</span>
                            <div class="menu-tooltip">Fornecedores</div>
                        </a>
                    </div>
                </div>

                <!-- Operações -->
                <div class="menu-section">
                    <div class="menu-section-title">Operações</div>
                    <div class="menu-item">
                        <a href="@Url.Action("Index", nameof(Venda))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Venda) ? "active" : "")">
                            <i class="fas fa-handshake"></i>
                            <span class="menu-link-text">Vendas</span>
                            <div class="menu-tooltip">Vendas</div>
                        </a>
                    </div>
                    <div class="menu-item">
                        <a href="@Url.Action("Index", nameof(Avaliacao))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Avaliacao) ? "active" : "")">
                            <i class="fas fa-clipboard-list"></i>
                            <span class="menu-link-text">Avaliações</span>
                            <div class="menu-tooltip">Avaliações</div>
                        </a>
                    </div>
                    @if (User.IsInRole("Admin") || User.IsInRole("Financeiro"))
                    {
                        <div class="menu-item">
                            <a href="@Url.Action("Index", nameof(Despesa))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Despesa) ? "active" : "")">
                                <i class="fas fa-credit-card"></i>
                                <span class="menu-link-text">Despesas</span>
                                <div class="menu-tooltip">Despesas</div>
                            </a>
                        </div>
                    }
                </div>

                <!-- Relatórios -->
                @if (Globais.EhAutoGestao && (User.IsInRole("Admin") || User.IsInRole("Gerente") || User.IsInRole("Financeiro")))
                {
                    <div class="menu-section">
                        <div class="menu-section-title">Relatórios</div>
                        <div class="menu-item">
                            <a href="@Url.Action("Venda", "Relatorio")" class="menu-link">
                                <i class="fas fa-chart-bar"></i>
                                <span class="menu-link-text">Vendas</span>
                                <div class="menu-tooltip">Relatórios de Vendas</div>
                            </a>
                        </div>
                        <div class="menu-item">
                            <a href="@Url.Action("Estoque", "Relatorio")" class="menu-link">
                                <i class="fas fa-chart-line"></i>
                                <span class="menu-link-text">Estoque</span>
                                <div class="menu-tooltip">Relatórios de Estoque</div>
                            </a>
                        </div>
                    </div>
                }

                <!-- Administração -->
                @if (User.IsInRole("Admin"))
                {
                    <div class="menu-section">
                        <div class="menu-section-title">Administração</div>
                        <div class="menu-item">
                            <a href="@Url.Action("Index", nameof(Usuario))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(Usuario) ? "active" : "")">
                                <i class="fas fa-users-cog"></i>
                                <span class="menu-link-text">Usuários</span>
                                <div class="menu-tooltip">Usuários</div>
                            </a>
                        </div>
                        <div class="menu-item">
                            <a href="@Url.Action("Index", nameof(AuditLog))" class="menu-link @(ViewContext.RouteData.Values["controller"]?.ToString() == nameof(AuditLog) ? "active" : "")">
                                <i class="fas fa-history"></i>
                                <span class="menu-link-text">Auditoria</span>
                                <div class="menu-tooltip">Auditoria</div>
                            </a>
                        </div>
                        <div class="menu-item">
                            <a href="@Url.Action("Dashboard", nameof(AuditLog))" class="menu-link">
                                <i class="fas fa-chart-bar"></i>
                                <span class="menu-link-text">Dashboard Auditoria</span>
                                <div class="menu-tooltip">Dashboard Auditoria</div>
                            </a>
                        </div>
                        <div class="menu-item">
                            <a href="@Url.Action("Index", "Configuracao")" class="menu-link">
                                <i class="fas fa-cog"></i>
                                <span class="menu-link-text">Configurações</span>
                                <div class="menu-tooltip">Configurações</div>
                            </a>
                        </div>
                    </div>
                }

            </nav>
        </aside>

        <!-- Overlay para mobile -->
        <div class="sidebar-overlay" id="sidebarOverlay"></div>

        <!-- Área Principal -->
        <div class="main-area">
            <!-- Topbar -->
            <header class="topbar">
                <div class="topbar-left">
                    <button class="sidebar-toggle" id="sidebarToggle">
                        <i class="fas fa-bars"></i>
                    </button>
                    <nav class="breadcrumb breadcrumb-custom">
                        <span class="breadcrumb-item">Sistema</span>
                        <span class="breadcrumb-item active">@ViewData["Title"]</span>
                    </nav>
                </div>
                <div class="topbar-right">
                    <partial name="_LoginPartial" />
                </div>
            </header>

            <!-- Conteúdo Principal -->
            <main class="main-content fade-in">
                @RenderBody()
            </main>
        </div>
    </div>

    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Scripts de validação -->
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/js/validation-pt-br.js"></script>

    <!-- Scripts da aplicação -->
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="~/js/controller-utils.js" asp-append-version="true"></script>
    <script src="~/js/standard-form.js" asp-append-version="true"></script>
    <script src="~/js/grid-enhanced.js" asp-append-version="true"></script>
    <script src="~/js/conditional-fields.js" asp-append-version="true"></script>
    <script src="~/js/itemvenda.js" asp-append-version="true"></script>
    <script src="~/js/file-upload.js" asp-append-version="true"></script>
    <script src="~/js/tab-system.js" asp-append-version="true"></script>
    <script src="~/js/tab-content.js" asp-append-version="true"></script>
    <script src="~/js/complete-modal-system.js" asp-append-version="true"></script>
    <script src="~/js/response-handlers.js" asp-append-version="true"></script>
    <script src="~/js/grid-specific-fixes.js" asp-append-version="true"></script>
    <script src="~/js/grid-controller-resolver.js" asp-append-version="true"></script>

    @if (!Globais.EhAutoGestao)
    {
        <!-- SCIPTS APENAS PARA UTILIZAR REACT -->
        <script src="https://unpkg.com/react@18/umd/react.production.min.js" asp-append-version="true"></script>
        <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" asp-append-version="true"></script>
        <script src="~/react-dashboard/static/js/main.js" asp-append-version="true"></script>
    }

    <!-- Esse script da aplicação vem sempre no final -->
    <script src="~/js/reference-field.js" asp-append-version="true"></script>

    <script>
        window.loadReactDashboard = function() {
            const root = ReactDOM.createRoot(document.getElementById('react-root'));
            root.render(React.createElement(DashboardBI));
        }
    </script>

    <!-- SISTEMA DE SIDEBAR E LAYOUT -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const sidebar = document.getElementById('sidebar');
            const sidebarCollapseBtn = document.getElementById('sidebarCollapseBtn');
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebarOverlay = document.getElementById('sidebarOverlay');

            // Variável para controlar se estamos processando um clique
            let isProcessingClick = false;

            // Recuperar estado salvo do localStorage
            const savedCollapsedState = localStorage.getItem('sidebarCollapsed') === 'true';
            if (savedCollapsedState) {
                sidebar.classList.add('collapsed');
                updateCollapseIcon(true);
            }

            // Botão de colapsar/expandir
            sidebarCollapseBtn?.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                if (isProcessingClick) return;
                isProcessingClick = true;

                const isCollapsed = sidebar.classList.contains('collapsed');

                if (isCollapsed) {
                    sidebar.classList.remove('collapsed');
                    localStorage.setItem('sidebarCollapsed', 'false');
                    updateCollapseIcon(false);
                } else {
                    sidebar.classList.add('collapsed');
                    localStorage.setItem('sidebarCollapsed', 'true');
                    updateCollapseIcon(true);
                }

                setTimeout(() => {
                    isProcessingClick = false;
                }, 400);
            });

            sidebarToggle?.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                if (isProcessingClick) return;
                isProcessingClick = true;

                const isCollapsed = sidebar.classList.contains('collapsed');

                if (isCollapsed) {
                    sidebar.classList.remove('collapsed');
                    localStorage.setItem('sidebarCollapsed', 'false');
                    updateCollapseIcon(false);
                } else {
                    sidebar.classList.add('collapsed');
                    localStorage.setItem('sidebarCollapsed', 'true');
                    updateCollapseIcon(true);
                }

                setTimeout(() => {
                    isProcessingClick = false;
                }, 400);
            });

            // Fechar sidebar ao clicar no overlay (mobile)
            sidebarOverlay?.addEventListener('click', function() {
                sidebar.classList.remove('open');
                sidebarOverlay.classList.remove('show');
            });

            // Atualizar ícone do botão de colapsar
            function updateCollapseIcon(isCollapsed) {
                const icon = sidebarCollapseBtn?.querySelector('i');
                if (icon) {
                    if (isCollapsed) {
                        icon.className = 'fas fa-chevron-right';
                        sidebarCollapseBtn.title = 'Expandir Menu';
                    } else {
                        icon.className = 'fas fa-chevron-left';
                        sidebarCollapseBtn.title = 'Recolher Menu';
                    }
                }
            }

            // Redimensionamento da janela
            window.addEventListener('resize', function() {
                if (window.innerWidth > 1024) {
                    sidebar.classList.remove('open');
                    sidebarOverlay.classList.remove('show');
                }
            });
        });
    </script>

    <!-- Sistema de Grid Unificado -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Variáveis globais para controle da grid
            let isLoadingVisible = false;
            let loadingTimeout = null;

            // ===================================================================
            // FUNÇÃO PARA CONTROLAR LOADING
            // ===================================================================
            window.showLoading = function(show) {
                const overlay = document.getElementById('loadingOverlay');

                if (!overlay) {
                    console.warn('Loading overlay não encontrado');
                    return;
                }

                // Limpar timeout anterior
                if (loadingTimeout) {
                    clearTimeout(loadingTimeout);
                    loadingTimeout = null;
                }

                if (show) {
                    isLoadingVisible = true;
                    overlay.classList.remove('d-none');
                    overlay.style.display = 'flex';
                    overlay.style.opacity = '1';
                    overlay.style.visibility = 'visible';

                    // Adicionar classe loading à tabela
                    const table = document.querySelector('.base-grid-table');
                    if (table) {
                        table.classList.add('loading');
                    }

                    // Timeout de segurança - forçar esconder após 15 segundos
                    loadingTimeout = setTimeout(() => {
                        console.warn('Loading forçado a esconder após timeout');
                        showLoading(false);
                    }, 15000);

                } else {
                    isLoadingVisible = false;
                    overlay.style.opacity = '0';

                    // Remover classe loading da tabela
                    const table = document.querySelector('.base-grid-table');
                    if (table) {
                        table.classList.remove('loading');
                    }

                    // Aguardar transição antes de esconder completamente
                    setTimeout(() => {
                        overlay.classList.add('d-none');
                        overlay.style.display = 'none';
                        overlay.style.visibility = 'hidden';
                    }, 300);
                }
            };

            // Função para forçar esconder loading (emergência)
            window.forceHideLoading = function() {
                const overlay = document.getElementById('loadingOverlay');
                if (overlay) {
                    isLoadingVisible = false;
                    overlay.classList.add('d-none');
                    overlay.style.display = 'none';
                    overlay.style.opacity = '0';
                    overlay.style.visibility = 'hidden';

                    const table = document.querySelector('.base-grid-table');
                    if (table) {
                        table.classList.remove('loading');
                    }

                    if (loadingTimeout) {
                        clearTimeout(loadingTimeout);
                        loadingTimeout = null;
                    }
                }
            };

            // ===================================================================
            // FUNÇÃO GENÉRICA PARA APLICAR FILTROS
            // ===================================================================
            window.aplicarFiltros = function(page = 1) {
                // Prevenir múltiplas requisições
                if (isLoadingVisible) {
                    console.log('Já carregando, ignorando nova requisição');
                    return;
                }

                showLoading(true);

                const formData = new FormData(document.getElementById('filtrosForm'));
                const pageSize = document.getElementById('pageSizeSelector')?.value || 50;

                const params = new URLSearchParams();
                params.append('page', page);
                params.append('pageSize', pageSize);

                // Adicionar filtros
                for (let [key, value] of formData.entries()) {
                    if (value && value.trim() !== '') {
                        params.append(key, value);
                    }
                }

                // Determinar URL baseado na página atual
                const currentPath = window.location.pathname.toLowerCase();
                let ajaxUrl;

                let controller = gridControllerResolver.getCurrentController(); //this.getAttribute('data-controller');
                if (controller != null)
                {
                    ajaxUrl = `'${controller}/Get${controller}Ajax`;
                }
                else
                {
                    console.error('URL Ajax não identificada para:', currentPath);
                    forceHideLoading();
                    return;
                }

                fetch(`${ajaxUrl}?${params.toString()}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        return response.text();
                    })
                    .then(html => {
                        const gridContainer = document.getElementById('gridContainer');
                        if (gridContainer) {
                            gridContainer.innerHTML = html;
                            updateUrl(params);
                            initializeGridEvents();
                        } else {
                            console.error('Grid container não encontrado');
                        }
                    })
                    .catch(error => {
                        showError('Erro ao carregar dados: ' + error.message);
                    })
                    .finally(() => {
                        // Sempre esconder loading
                        setTimeout(() => {
                            showLoading(false);
                        }, 300); // Pequeno delay para UX melhor
                    });
            };

            // ===================================================================
            // FUNÇÃO PARA MUDAR PÁGINA
            // ===================================================================
            window.changePage = function(page) {
                aplicarFiltros(page);
            };

            // ===================================================================
            // FUNÇÃO PARA ATUALIZAR URL
            // ===================================================================
            window.updateUrl = function(params) {
                try {
                    const newUrl = `${window.location.pathname}?${params.toString()}`;
                    window.history.replaceState({}, '', newUrl);
                } catch (error) {
                    console.error('Erro ao atualizar URL:', error);
                }
            };

            // ===================================================================
            // FUNÇÃO PARA LIMPAR FILTROS
            // ===================================================================
            window.limparFiltros = function() {
                const form = document.getElementById('filtrosForm');
                if (form) {
                    form.reset();
                }

                const pageSize = document.getElementById('pageSizeSelector');
                if (pageSize) {
                    pageSize.value = '50';
                }

                aplicarFiltros(1);
            };

            // ===================================================================
            // FUNÇÃO PARA ORDENAÇÃO DE COLUNAS
            // ===================================================================
            window.sortColumn = function(column) {
                // Buscar campos hidden de ordenação (se existirem)
                let orderBy = document.getElementById('orderBy');
                let orderDirection = document.getElementById('orderDirection');

                // Se não existirem, criar dinamicamente
                if (!orderBy) {
                    orderBy = document.createElement('input');
                    orderBy.type = 'hidden';
                    orderBy.id = 'orderBy';
                    orderBy.name = 'orderBy';
                    orderBy.value = 'Nome';
                    document.getElementById('filtrosForm').appendChild(orderBy);
                }

                if (!orderDirection) {
                    orderDirection = document.createElement('input');
                    orderDirection.type = 'hidden';
                    orderDirection.id = 'orderDirection';
                    orderDirection.name = 'orderDirection';
                    orderDirection.value = 'asc';
                    document.getElementById('filtrosForm').appendChild(orderDirection);
                }

                const currentOrder = orderBy.value;
                const currentDirection = orderDirection.value;

                // Se já está ordenando por esta coluna, inverte a direção
                if (currentOrder === column) {
                    orderDirection.value = currentDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    orderBy.value = column;
                    orderDirection.value = 'asc';
                }

                aplicarFiltros();
            };

            // ===================================================================
            // FUNÇÃO PARA CONFIRMAR EXCLUSÃO
            // ===================================================================
            window.confirmarExclusao = function(id) {
                if (confirm('Tem certeza que deseja excluir este registro? Esta ação não pode ser desfeita.')) {
                    const currentPath = window.location.pathname.toLowerCase();
                    let controller = window.gridControllerResolver.getCurrentController();

                    if (controller)
                    {
                        showLoading(true);
                        window.location.href = `/${controller}/Delete/${id}`;
                    }
                }
            };

            // ===================================================================
            // INICIALIZAÇÃO DOS EVENTOS DA GRID
            // ===================================================================
            window.initializeGridEvents = function() {

                // Duplo clique nas linhas
                const rows = document.querySelectorAll('.grid-row');
                rows.forEach(row => {
                    // Remover eventos anteriores para evitar duplicação
                    row.removeEventListener('dblclick', handleRowDoubleClick);
                    row.addEventListener('dblclick', handleRowDoubleClick);
                });

                // Ordenação das colunas
                const sortIcons = document.querySelectorAll('.sort-icon');
                sortIcons.forEach(icon => {
                    icon.removeEventListener('click', handleSortClick);
                    icon.addEventListener('click', handleSortClick);
                });
            };

            // ===================================================================
            // HANDLERS DE EVENTOS
            // ===================================================================
            function handleRowDoubleClick(e) {
                // Evitar conflito com dropdown de ações
                if (e.target.closest('.dropdown') || e.target.closest('.actions-btn')) {
                    return;
                }

                const id = this.getAttribute('data-id');
                const controller = this.getAttribute('data-controller');

                if (id && controller) {
                    showLoading(true);
                    window.location.href = `/${controller}/Details/${id}`;
                }
            }

            function handleSortClick(e) {
                e.stopPropagation();
                const sortKey = this.getAttribute('data-sort');
                if (sortKey) {
                    sortColumn(sortKey);
                }
            }

            // ===================================================================
            // CONFIGURAÇÃO INICIAL DOS FILTROS
            // ===================================================================
            function initializeFilters() {
                // Filtros com debounce para busca
                let searchTimeout;
                const searchInputs = [
                    'searchInput', 'searchCliente', 'searchVeiculo'
                ];

                searchInputs.forEach(inputId => {
                    const element = document.getElementById(inputId);
                    if (element) {
                        element.addEventListener('input', function() {
                            clearTimeout(searchTimeout);
                            searchTimeout = setTimeout(() => {
                                aplicarFiltros(1);
                            }, 600); // 600ms de delay
                        });
                    }
                });

                // Outros filtros aplicam imediatamente
                const immediateFilters = [
                    'filterSituacao', 'filterTipo', 'filterStatus',
                    'filterMarca', 'filterAno', 'filterCombustivel'
                ];

                immediateFilters.forEach(filterId => {
                    const element = document.getElementById(filterId);
                    if (element) {
                        element.addEventListener('change', () => aplicarFiltros(1));
                    }
                });

                // Seletor de tamanho de página
                const pageSizeSelector = document.getElementById('pageSizeSelector');
                if (pageSizeSelector) {
                    pageSizeSelector.addEventListener('change', function() {
                        aplicarFiltros(1);
                    });
                }
            }

            // ===================================================================
            // PREVENÇÃO DE LOADING INFINITO
            // ===================================================================
            function setupLoadingProtection() {
                // Esconder loading inicial
                setTimeout(forceHideLoading, 1000);

                // Event listener para detectar quando a página termina de carregar
                window.addEventListener('load', function() {
                    setTimeout(forceHideLoading, 1500);
                });

                // Prevenir loading infinito em caso de erro de JavaScript
                window.addEventListener('error', function(event) {
                    console.error('Erro JavaScript detectado:', event.error);
                    forceHideLoading();
                });

                // Detectar mudanças de visibilidade da página
                document.addEventListener('visibilitychange', function() {
                    if (document.visibilityState === 'visible' && isLoadingVisible) {
                        setTimeout(() => {
                            if (isLoadingVisible) {
                                console.warn('Loading ainda visível após mudança de visibilidade, forçando esconder');
                                forceHideLoading();
                            }
                        }, 3000);
                    }
                });
            }

            // ===================================================================
            // UTILITÁRIOS DE DEBUG
            // ===================================================================
            window.debugGrid = function() {
                const overlay = document.getElementById('loadingOverlay');
                const table = document.querySelector('.base-grid-table');
                const rows = document.querySelectorAll('.grid-row');

                console.log('=== GRID DEBUG ===');
                console.log('Loading overlay:', {
                    exists: !!overlay,
                    visible: isLoadingVisible,
                    classes: overlay?.className,
                    style: overlay?.style.cssText
                });
                console.log('Table:', {
                    exists: !!table,
                    classes: table?.className,
                    rows: rows.length
                });
                console.log('Grid state:', {
                    isLoadingVisible,
                    hasTimeout: !!loadingTimeout
                });
            };

            // ===================================================================
            // MELHORIAS DE ACESSIBILIDADE
            // ===================================================================
            function setupAccessibility() {
                // Adicionar ARIA labels e roles
                const table = document.querySelector('.base-grid-table');
                if (table) {
                    table.setAttribute('role', 'grid');
                    table.setAttribute('aria-label', 'Tabela de dados com filtros e ordenação');
                }

                // Headers ordenáveis
                const sortableHeaders = document.querySelectorAll('[data-sortable]');
                sortableHeaders.forEach(header => {
                    header.setAttribute('role', 'columnheader');
                    header.setAttribute('tabindex', '0');
                    header.setAttribute('aria-sort', 'none');

                    // Permitir ordenação via teclado
                    header.addEventListener('keydown', function(e) {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            const sortKey = this.getAttribute('data-sortable');
                            if (sortKey) {
                                sortColumn(sortKey);
                            }
                        }
                    });
                });

                // Linhas da grid
                const rows = document.querySelectorAll('.grid-row');
                rows.forEach((row, index) => {
                    row.setAttribute('role', 'row');
                    row.setAttribute('tabindex', '0');
                    row.setAttribute('aria-rowindex', index + 2); // +2 porque header é 1

                    // Navegação por teclado
                    row.addEventListener('keydown', function(e) {
                        if (e.key === 'Enter') {
                            this.dispatchEvent(new MouseEvent('dblclick'));
                        }
                    });
                });
            }

            // ===================================================================
            // INICIALIZAÇÃO PRINCIPAL
            // ===================================================================
            function initializeGrid() {
                console.log('🚀 Inicializando sistema de grid unificado...');

                // Configurar proteção de loading
                setupLoadingProtection();

                // Inicializar filtros
                initializeFilters();

                // Inicializar eventos da grid
                initializeGridEvents();

                // Configurar acessibilidade
                setupAccessibility();

                // Forçar esconder loading inicial
                forceHideLoading();

                console.log('✅ Sistema de grid inicializado com sucesso');
            }

            // ===================================================================
            // AUTO-INICIALIZAÇÃO
            // ===================================================================

            // Inicializar quando DOM estiver pronto
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', initializeGrid);
            } else {
                initializeGrid();
            }

            // Re-inicializar após AJAX
            document.addEventListener('gridUpdated', initializeGridEvents);

            // Exposer funções globais para debug
            window.gridUtils = {
                showLoading,
                forceHideLoading,
                aplicarFiltros,
                changePage,
                updateUrl,
                limparFiltros,
                sortColumn,
                debugGrid,
                initializeGridEvents
            };
        });

        // ===================================================================
        // FUNÇÕES ESPECÍFICAS PARA DIFERENTES CONTROLADORES
        // ===================================================================

        // Nova venda (Clientes)
        window.novaVenda = function(clienteId) {
            if (clienteId) {
                window.location.href = `/Venda/Create?clienteId=${clienteId}`;
            } else {
                window.location.href = '/Venda/Create';
            }
        };

        // Nova avaliação (Clientes)
        window.novaAvaliacao = function(clienteId) {
            if (clienteId) {
                window.location.href = `/Avaliacao/Create?clienteId=${clienteId}`;
            } else {
                window.location.href = '/Avaliacao/Create';
            }
        };

        // Vender veículo (Veículos)
        window.venderVeiculo = function(idVeiculo) {
            if (idVeiculo) {
                window.location.href = `/Venda/Create?idVeiculo=${idVeiculo}`;
            }
        };

        // ===================================================================
        // OTIMIZAÇÕES DE PERFORMANCE
        // ===================================================================

        // Debounce helper
        function debounce(func, wait, immediate) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    timeout = null;
                    if (!immediate) func(...args);
                };
                const callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func(...args);
            };
        }

        // Throttle helper
        function throttle(func, limit) {
            let inThrottle;
            return function() {
                const args = arguments;
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            }
        }

        // ===================================================================
        // OBSERVADOR DE INTERSECÇÃO PARA LAZY LOADING
        // ===================================================================
        function setupIntersectionObserver() {
            if ('IntersectionObserver' in window) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('animate-in');
                        }
                    });
                }, {
                    threshold: 0.1,
                    rootMargin: '50px'
                });

                // Observar cards e elementos da grid
                document.querySelectorAll('.card-modern, .grid-row').forEach(el => {
                    observer.observe(el);
                });
            }
        }

        // Inicializar observer após carregamento
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(setupIntersectionObserver, 500);
        });
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

<style>
    .grid-1 {
        grid-template-columns: 1fr !important;
    }

    .grid-2 {
        grid-template-columns: 1fr 1fr !important;
    }

    .grid-3 {
        grid-template-columns: 1fr 1fr 1fr !important;
    }

    .grid-4 {
        grid-template-columns: 1fr 1fr 1fr 1fr !important;
    }

    .grid-5 {
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr !important;
    }

    .grid-6 {
        grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr !important;
    }

    .form-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

        .form-section h6 {
            color: #495057;
            font-weight: 600;
            margin-bottom: 1rem;
            border-bottom: 2px solid #dee2e6;
            padding-bottom: 0.5rem;
        }

    .btn-action {
        transition: all 0.3s ease;
    }

        .btn-action:hover {
            transform: translateY(-1px);
        }
</style>